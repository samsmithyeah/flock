rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users Collection
    match /users/{uid} {
      // Allow users to read user details if they are authenticated
      allow read: if request.auth != null;

      // Allow users to create and update their own user details
      allow create, update: if request.auth != null && request.auth.uid == uid;

      // Prevent users from modifying certain sensitive fields
      allow update: if request.auth != null && request.auth.uid == uid
        && !("uid" in request.resource.data)
        && !("email" in request.resource.data);
    }
    
    // Crews Collection
    match /crews/{crewId} {
      allow create: if request.auth != null;

      // Temporary rule to allow all authenticated users to read all crews
      allow read: if request.auth != null;
      
      // Allow update if the user is a crew member or has a pending invitation
      allow update: if isCrewMember(crewId) || isInvitationRecipientForCrew(crewId);
      
      // Allow delete if the user is the crew owner
      allow delete: if isCrewOwner(crewId);
      
      // Subcollection: statuses
      match /statuses/{date} {
        // Temporary rule to allow all authenticated users to read all statuses
        allow read: if request.auth != null;

        // Subcollection: userStatuses
        match /userStatuses/{userId} {
          // Temporary rule to allow all authenticated users to read all userStatuses
          allow read: if request.auth != null;
          
          // Allow create, update, delete if the user is a crew member and is modifying their own status
          allow create, update, delete: if isCrewMember(crewId) && request.auth.uid == userId;
        }
      }

      // Subcollection: events
      match /events/{eventId} {
        allow read: if request.auth != null;
        
        // Allow create if the user is a crew member
        allow create: if isCrewMember(crewId);
        
        // Allow update if the user is the event creator or the crew owner
        allow update: if request.auth != null
                      && (request.auth.uid == resource.data.createdBy || isCrewOwner(crewId));
        
        // Allow delete if the user is the event creator or the crew owner
        allow delete: if request.auth != null
                      && (request.auth.uid == resource.data.createdBy || isCrewOwner(crewId));
      }
      
      // Subcollection: messages for persistent crew chat
      match /messages/{messageId} {
        // Allow read if the user is a crew member
        allow read: if isCrewMember(crewId);
        
        // Allow create if the user is a crew member and is sending as themselves
        allow create: if isCrewMember(crewId) && 
                      request.resource.data.senderId == request.auth.uid;
        
        // Allow update/delete if the user is the message creator or crew owner
        allow update, delete: if request.auth != null && 
                             (request.auth.uid == resource.data.senderId || isCrewOwner(crewId));
      }
    }
    
    // Event Polls Collection
    match /event_polls/{pollId} {
      // Allow reading polls for authenticated users
      allow read: if request.auth != null;
      
      // Allow creating polls if the user is a member of the referenced crew
      allow create: if request.auth != null && 
                    request.resource.data.crewId is string &&
                    isCrewMember(request.resource.data.crewId) &&
                    request.resource.data.createdBy == request.auth.uid;
      
      // Allow updates if:
      // 1. User is the poll creator (for finalizing)
      // 2. User is a crew member (for responding to poll options)
      allow update: if request.auth != null &&
                    (resource.data.createdBy == request.auth.uid ||
                     isCrewMember(resource.data.crewId));
                     
      // Limit certain updates to poll creator only
      allow update: if request.auth != null &&
                    resource.data.createdBy == request.auth.uid &&
                    ('finalized' in request.resource.data || 
                     'selectedDate' in request.resource.data);
      
      // Only poll creator or crew owner can delete 
      allow delete: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid || 
                     isCrewOwner(resource.data.crewId));
    }
    
    // Invitations Collection
    match /invitations/{invitationId} {
      // Temporary rule to allow read for authenticated users
      allow read: if request.auth != null;
      
      // Allow create if the sender is the authenticated user
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      
      // Allow update if the user is the recipient
      allow update: if isInvitationRecipient(invitationId);
      
      // Allow delete if the user is the sender
      allow delete: if isInvitationSender(invitationId);
    }

    // Direct Messages
    match /direct_messages/{conversationId} {
      //allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      // Temporary rule to allow for authenticated users
      allow read, write, create, update: if request.auth != null;

      
      match /messages/{messageId} {
        //allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/direct_messages/$(conversationId)).data.participants;
        // Temporary rule to allow for authenticated users
        allow read, write, create, update: if request.auth != null;
      }
    }

    // Crew Date-Based Chats
    match /crew_date_chats/{chatId} {
      //allow read, write: if request.auth != null && request.auth.uid in resource.data.members;
      // Temporary rule to allow for authenticated users
      allow read, write, create, update: if request.auth != null;
      
      match /messages/{messageId} {
        //allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/crew_date_chats/$(chatId)).data.members;
        // Temporary rule to allow read for authenticated users
        allow read, write, create, update: if request.auth != null;
      }
    }
    
    // Helper Functions
    
    // Check if the authenticated user is a member of the crew
    function isCrewMember(crewId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/crews/$(crewId)) &&
             request.auth.uid in get(/databases/$(database)/documents/crews/$(crewId)).data.memberIds;
    }
    
    // Check if the authenticated user is the owner of the crew
    function isCrewOwner(crewId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/crews/$(crewId)) &&
             get(/databases/$(database)/documents/crews/$(crewId)).data.ownerId == request.auth.uid;
    }
    
    // Check if the authenticated user is the recipient of the invitation
    function isInvitationRecipient(invitationId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/invitations/$(invitationId)) &&
             get(/databases/$(database)/documents/invitations/$(invitationId)).data.toUserId == request.auth.uid;
    }
    
    // Check if the authenticated user is the sender of the invitation
    function isInvitationSender(invitationId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/invitations/$(invitationId)) &&
             get(/databases/$(database)/documents/invitations/$(invitationId)).data.fromUserId == request.auth.uid;
    }
    
    // Check if the authenticated user has a pending invitation to the crew
    function isInvitationRecipientForCrew(crewId) {
      return request.auth != null &&
             request.resource.data.invitationId is string &&
             exists(/databases/$(database)/documents/invitations/$(request.resource.data.invitationId)) &&
             get(/databases/$(database)/documents/invitations/$(request.resource.data.invitationId)).data.toUserId == request.auth.uid &&
             get(/databases/$(database)/documents/invitations/$(request.resource.data.invitationId)).data.crewId == crewId &&
             get(/databases/$(database)/documents/invitations/$(request.resource.data.invitationId)).data.status == 'pending';
    }
  }
}
